
#![allow(unused)]

use std::thread;													// подключение бибилиотеки для работы с потоками
use std::sync::mpsc;											// подключение бибилиотеки для работы с многопоточными каналами

fn main() {


	// пример 1
	// пример 1
	// пример 1

	let handle = thread::spawn(|| {
  	println!("Hello from a thread!");
  });
	println!("Hello");
  handle.join().unwrap();
	println!("Hello");

	/*
		1) создаем новый поток handle, в котором будет анонимная функция 
  	2) функция выводит на экран строку текста
  	3) функция принимает замыкание в виде аргумента
		4) вызов, который блокирует текущий поток исполнения программы
		5) он (главный поток) ожидает завершения потока handle, который был создан с помощью thread::spawn()
  	6) join() возвращает Result, поэтому используем unwrap(), чтобы обработать ошибки (если они будут)
	*/

  // пример 2
  // пример 2
  // пример 2

  let data = vec![1, 2, 3, 4, 5];
  let handle = thread::spawn(move || {
    for num in data {
      println!("Number: {}", num);
    }
  });
  println!("Welcome");
  handle.join().unwrap();
  println!("Welcome");

  /*
  	1) data = вектор из 5 элементов
  	2) handle = поток, который выполнит код замыкания, которое ему передадут
  	3-1) move = это ключевое слово, которое передает владение данными (data) в замыкание 
  	3-2) это нужно для из-за того, что основная программа может закончится, а поток еще нет
  	3-3) для этого он (поток) должен владеть данными (data), с которыми он работает
    4) итерация по всем элементам data
    5) вывод элемента на экран
  */

  // пример 3
  // пример 3
  // пример 3

  // использование каналов для обмена сообщениями между потоками

  let (sender, receiver) = mpsc::channel();
  let handle = thread::spawn(move || {
      sender.send("Hello from another thread").unwrap();
  });
  let received = receiver.recv().unwrap();
  println!("Received: {}", received);
  handle.join().unwrap();

  /*
	  1) создаем канал связи между потоками
	  1-1) sender это отправитель (сообщений в канал)
	  1-2) receiver это приемник (сообщений из канала)
	  2) handle это поток с асинхронной задачей внутри него
	  3) send() это метод для посылки сообщения через канал
	  3-1) метод возвращает Result
	  3-2) unwrap() обрабатывает результат
	  4) received = получение сообщения из канала
	  4-1) recv() блокирует основной поток, пока не будет получено сообщение
	  4-2) сообщение получается в формате Result
	  4-3) unwrap() обрабатывает результат 
	  5) выводим сообщение на экран (в основной программе)
	  6) вызов потока
  */

  // пример 4
  // пример 4
  // пример 4

  // создание нескольких потоков в одной программе

  let mut handles = vec![];
  for i in 0..5 {
      let handle = thread::spawn(move || {
          println!("Thread {}", i);
      });
      handles.push(handle);
  }
  for handle in handles {
      handle.join().unwrap();
  }

}
