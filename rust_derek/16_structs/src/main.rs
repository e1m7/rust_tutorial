
#![allow(unused)]

// константа для вычислений
const PI: f32 = 3.14;

/*
	
	1) structs (структуры) это тип данных, который может содержать несколько полей
	2) этот тип данных программист делает для своих целей, если ему так удобно представлять данные
	3) этот тип данных можно создавать, передавать в функции, возвращать из функций и проч.

*/

fn main() {

	// Простые структуры

	// создаем структуру "покупатель"
	struct Customer {
		name: String,
		address: String,
		balance: f32
	};
	
	// создание экземпляра структуры "покупатель"
	let mut cust1 = Customer {
		name: String::from("Bob"),
		address: String::from("123 Main St"),
		balance: 100.50
	};

	println!("balance = {}", cust1.balance);
	cust1.balance = 200.50;
	println!("balance = {}", cust1.balance);


	// Сложные структуры

	// 4) сложные структуры это такие структуры, которые имеют специфические методы
	// 5) например, пусть у нас будет две структуры (прямоугольник, круг) с одинаковыми полями
	// 6) и мы не хотим писать для каждой структуры разные методы поиска площади (S прямоугольника, S круга)
	// 7) мы хотим иметь один метод, который подходит для обоих структур и вычисляет для каждой площадь

	// описываем первую структуру (прямоугольник)
	struct Rectangle {
		length: f32,
		width: f32,
	};

	// описываем вторую структуру (круг)
	struct Circle {
		length: f32,
		width: f32,
	};

	// описываем трейт, который называется Shape (фигура)
	// внутри трейта мы описываем сигнатуру функций, которые у него будут
	// сигнатура = название функции + аргументы и их типы + тип возвращаемого значения
	trait Shape {

		// 1) функция new() создает новый экземпляр структуры
		// 1) функция new() получает два числа, а возвращает структуру
		fn new(length: f32, width: f32) -> Self;

		// 2) функция area() считает площадь фигуры
		// 2) функция area() получает структуру, а возвращает площадь
		fn area(&self) -> f32;

	};


	// имплементируем функции для структуры Rectangle
	// трейт требует реалиации двух функций, которые работают с Rectangle
	// хорошо, мы напишем две функции, которые работают с Rectangle
	impl Shape for Rectangle {
		
		// создает новый экземпляр структуры
		fn new(length: f32, width: f32) -> Rectangle {
			return Rectangle { length, width };
		}

		// считает и возвращает площадь структуры
		fn area(&self) -> f32 {
			return self.length * self.width;
		}

	};

	// имплементируем функции для структуры Circle
	// трейт требует реалиации двух функций, которые работают с Circle
	// хорошо, мы напишем две функции, которые работают с Circle
	impl Shape for Circle {

		fn new(length: f32, width: f32) -> Circle {
			return Circle { length, width };
		}

		fn area(&self) -> f32 {
			return (self.length / 2.0).powf(2.0) * PI;
		}

	};

	// создаем  структуры
	let r1: Rectangle = Shape::new(2.0, 3.0);
	let r2: Rectangle = Shape::new(10.0, 10.0);
	let c1: Circle = Shape::new(2.0, 3.0);
	let c2: Circle = Shape::new(10.0, 10.0);

	// выводим результаты
	println!("Area r1 = {}", r1.area());
	println!("Area r2 = {}", r2.area());
	println!("Area c1 = {}", c1.area());
	println!("Area c2 = {}", c2.area());

}
