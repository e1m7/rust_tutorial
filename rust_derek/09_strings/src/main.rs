
#![allow(unused)]

fn main() {

	// создать новую строку 
	let mut st1: String = String::new();
	println!("st1 = {}", st1);

	// добавить к строке символ
	st1.push('H');
	println!("st1 = {}", st1);

	// добавить к строке строку
	st1.push_str("ello my beautiful world!");
	println!("st1 = {}", st1);

	// разбить строку по пробелу и проитерироваться по ней
	for word in st1.split_whitespace() {
		println!("word = {}", word);
	}

	// делаем вторую строку (мутабельная) из первой (`my` ==> `your`)
	let mut st2: String = st1.replace("my", "your");
	println!("st2 = {}", st2);

	// делаем третью строку (немутабельная) = строка из набора символов
	let st3: String = String::from("a a a b b c d e f g a h xyz");

	// создаем из третьей строки вектор
	let mut vec4: Vec<char> = st3.chars().collect();
	
	// выводим вектор на печать (в нем все символы третьей строки) 
	println!("vec4 = {:?}", vec4);

	// сортируем и снова выводим вектор 
	vec4.sort();
	println!("vec4 = {:?}", vec4);

	// удаляем из вектора дубликаты и снова выводим ветор
	vec4.dedup();
	println!("vec4 = {:?}", vec4);

	// мы можем итерироваться по вектору
	for v in vec4 {
		println!("vec = {}", v);
	}

	// создаем четвертую строку = ссылке на строку "Random string"
	let st4: &str = "Random string";
	println!("st4 = {}", st4);

	// создаем четвертую1 строку = замене четвертой 
	let mut st41: String = st4.replace("string", "strange");
	// let st41: &str = st4.replace("string", "strange");
	println!("st41 = {}", st41);

	/*

		в чем разница между String || &str?

		1) String - изменяемая строка
		2) &str - неизменяемая строка

	*/

	// да, так вполне можно: st41 мутабельная, к ней можно добавить символ
	st41.push('1');
	println!("st41 = {}", st41);

	// нет, так нельзя: st4 не мутабельная, к ней нельзя добавить символ 
	// st4.push('1');
	// println!("st4 = {}", st4);

	// строку-ссылку можно конвертировать в строку в куче или вектор
	let mut st5: String = st4.to_string();
	let mut vec5: Vec<char> = st4.chars().collect();
	println!("st5 = {}", st5);
	println!("vec5 = {:?}", vec5);

	// строку-ссылку можно резать (получается "слайс")
	let slise1: &str = &st4[0..5];
	println!("slis1 = {}", slise1);

	// изменяемую строку можно очистить
	let mut st6: String = "Hello".to_string();
	println!("st6 = {}", st6);
	st6.clear();
	println!("st6 = {}", st6);

	// объединение строк
	let st71: String = String::from("Hello, ");
	let st72: String = String::from("World!");
	let mut st7: String = st71 + &st72;								// st71.+(&st72) = такой вызов
	println!("st7 = {}", st7);

	// проход по строке как по байтам
	for c1 in st7.bytes() {
		println!("{}", c1);
	}

}

/*

	1) и строки и векторы = это коллекции, но у каждой свое назначение и функциональность

	2-1) строки это последовательность байт (символы Unicode), динамический тип, можно менять длину 
	2-2) со строками можно делать операции: добавить, удалить, изменить определенынй символ
	2-3) строки записываюстя в формате UTF-8, что позволяет использовать Unicode

	3-1) векторы это динамически расширяемый массив элементов одного типа (внутри любой тип данных)
	3-2) вектора динамиеский тип, можно менять и длину во время работы программы
	3-3) с векторами можно делать операции: добавить, удалить, прочитать элемент вектора

	4) String используют для работы с текстом, Vec для работы с элементами одного типа
	5) строка при печати выглядит как строка, а вектор при печати выглядит как массив символов
	6) придется четно понимать как работать со строкой: а) как со строкой, б) как с вектором
	7) все будет зависеть от задачи, которая перед нами стоит

*/