
#![allow(unused)]

/*

	1) функция это именованный кусок кода, котоырй можно вызвать для исполнения
	2) функции можно определять до или после основной функции main()

*/

	// 1) функция, которая выводит строку текста
	fn say_hello() {
		println!("Hello, world!");
	}

	// 2) функция, которая получает два значения типа i32 и выводит их + сумму
	fn print_sum(x: i32, y: i32) {
		print!("{} + {} = {}", x, y, x + y);
	}

	// 3) функция, которая возвращает значение = сумме двух аргументов функции
	fn ret_sum1(x: i32, y: i32) -> i32 {
		// в строке ниже нет точки с запятой после x + y
		// x + y это не операция (типа let a = 10;), а выражение (типа 2 + 3)
		x + y
	}

	// 4) функция, котора возвращает значение = сумме двух аргументов функции
	fn ret_sum2(x: i32, y: i32) -> i32 {
		// в строке ниже есть точка с запятой после x + y
		// return x + y; это операция, которая возвращает выражение
		return x + y;
	}

	// 5) функция, которая получает 1 значение (имеет 1 аргумент), а возвращает кортеж (два значения)
	fn ret_two_value(x: i32) -> (i32, i32) {
		// например: получили 3, вернули (4,5)
		return (x + 1, x + 2);
	}

	// 6) функция, которая получает список неизвестной длины, а возвращает его сумму
	fn ret_sum_list(list: &[i32]) -> i32 {
		let mut s = 0;
		for &val in list.iter() {
			s = s + &val;
		}
		return s;
	}

fn main() {

	// вызвать функцию вывода привет мир
	say_hello();

	// вызвать функцию для печати сложения двух чисел
	print_sum(5, 6);
	println!();

	// вызвать функцию, которая возвращает сумму двух чисел
	println!("4 + 5 = {}", ret_sum1(4, 5));
	println!("4 + 5 = {}", ret_sum2(4, 5));

	// вызвать функцию, которая возвращает два значения (x+1,x+2)
	println!("{:?}", ret_two_value(5));

	// присвоить двум переменным значения, которые возвращает функция (их два)
	let (a, b) = ret_two_value(5);
	println!("a = {}, b = {}", a, b);

	// вызвать функцию, которая получает список чисел и возвращает сумму этих чисел
	let number_list1: Vec<i32> = vec![1,2,3];
	println!("Summa = {}", ret_sum_list(&number_list1));

}
