
// Program: guessing_game (угадай число 1-100)
// Copyright: Ivan Sedov, MIT
// Date: 10/04/2024

use std::io;
// 1) подключаем библиотеку ввода-вывода
use rand::Rng;
// 1) подключаем библиотеку случайных чисел
use std::cmp::Ordering;
// 1) подключаем библиотеку сравнений

fn main() {
// 1) основная программа без параметров

  println!("Guess the number");
  // 1) вывод строки = название игры

  let secret_number = rand::thread_rng().gen_range(1..=100);
  // 1) создаем переменную secret_number
  // 2) тип переменной u32 (беззнаковое целое число)
  // 3) значение переменной = число 1-100 включительно

  // println!("Secret number: {secret_number}");
  // 1) вывод строки = случайное число
  // 2) подставить значение случайного числа

  loop {

	  println!("Please input your guess");
	  // 1) вывод строки = введите ваше число

	  let mut guess = String::new();
	  // 1) создать новую переменную `guess`
	  // 2) тип переменной String::new() = пустая строка
	  // 3) характеристика переменной mut = изменяемая

	  io::stdin().read_line(&mut guess).expect("Failed to read line");
	  // 1) запустить ввод строки пользователя
	  // 2) прочитать строку в переменную guess (изменяемая ссылка)
	  // 3) если произошла ошибка, то прекратить выполнение
	  // 4) если произошла ошибка, то вывести строку = ошибка чтения линии

	  let guess: u32 = match guess.trim().parse() {
	  		Ok(num) => num,
	  		Err(_) => continue,
	  	};
	  // 1) создать новую переменную `guess` (через сравнение результата)
	  // 2) она затенит старую строковую переменную `guess`
	  // 3) она будет типа u32 (беззнаковое целое число)
	  // 4) trim() = удаляем пробелы до и после строки
	  // 5) parse() = конвертируем строку в число
	  // 5-1) если конвертация успешна, то вернем число
	  // 5-2) если была ошибка, то перейдем на начало цикла

	  println!("Your guess: {guess}");
	  // 1) вывод строки = ваш ответ
	  // 2) подставить значение переменной guess
	  
	  match guess.cmp(&secret_number) {
	  	Ordering::Less => println!("Too small"),
	  	Ordering::Greater => println!("Too big"),
	  	Ordering::Equal => {
	  		println!("You win");
	  		break;
	  	}
	  	// 1) в ветке сравнения, где получилось равенство
	  	// 2) вывести строку = вы победитель
	  	// 3) выйти из цикла

		}
		// 1) сравнение введенного числа и секретного числа
		// 2) если оно меньше, то пишем "слишком мало"
		// 3) если оно больше, то пишем "слишком много"
		// 4) если оно равно, то пишем "вы победили"

	} // loop

} // main
